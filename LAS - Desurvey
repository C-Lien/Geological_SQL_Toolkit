DROP TABLE IF EXISTS #TempSurveyTable;

SELECT
    s.PROJECT,
    s.SITE_ID,
    d.DEPTH,
	CASE 
		WHEN LAG(d.DEPTH) OVER (PARTITION BY s.SITE_ID ORDER BY d.DEPTH ASC) IS NULL THEN 0
		ELSE d.DEPTH - LAG(d.DEPTH) OVER (PARTITION BY s.SITE_ID ORDER BY d.DEPTH ASC)
	END AS INTERVAL,
    MAX(CASE WHEN d.LOG_TYPE = 'AZIMUTH' THEN d.LOG_VAL ELSE NULL END) AS AZIMUTH,
    MAX(CASE WHEN d.LOG_TYPE = 'INCLINATION' THEN -90 + d.LOG_VAL ELSE NULL END) AS INCLINATION
INTO #TempSurveyTable
FROM
	GB_SITE s
JOIN
    [dbo].[GB_GEOPHYS_LAS_DATA] d ON s.PROJECT = d.PROJECT AND s.SITE_ID = d.SITE_ID
WHERE
    --d.SITE_ID = '?Select Site?'
    --s.DATE_INSERTED BETWEEN '?From Date?' AND '?To Date?'
	  --s.DATE_INSERTED > '?Start Date?'
	  s.VALIDATION_GROUP = 'DEFAULT'
    AND d.PROJECT = '?Select Project?'
    AND d.INSTANCE = 1
GROUP BY
    s.PROJECT,
    s.SITE_ID,
    d.DEPTH
HAVING
	MAX(CASE WHEN d.LOG_TYPE = 'AZIMUTH' THEN d.LOG_VAL ELSE NULL END) IS NOT NULL
	OR MAX(CASE WHEN d.LOG_TYPE = 'INCLINATION' THEN -90+d.LOG_VAL ELSE NULL END) IS NOT NULL;

WITH CalculatedDeltas AS (
	SELECT
		PROJECT,
		SITE_ID,
		DEPTH,
		LAG(DEPTH) OVER (PARTITION BY SITE_ID ORDER BY DEPTH) AS PrevDepth,
		AZIMUTH,
		INCLINATION,
		INTERVAL,
		COS(RADIANS(INCLINATION)) * COS(RADIANS(AZIMUTH)) * INTERVAL AS DeltaX,
		COS(RADIANS(INCLINATION)) * SIN(RADIANS(AZIMUTH)) * INTERVAL AS DeltaY,
		SIN(RADIANS(INCLINATION)) * INTERVAL AS DeltaZ
	FROM
		#TempSurveyTable
),
AccumulatedCoords AS (
	SELECT
		PROJECT,
		SITE_ID,
		DEPTH,
		SUM(DeltaX) OVER (PARTITION BY SITE_ID ORDER BY DEPTH ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS X,
		SUM(DeltaY) OVER (PARTITION BY SITE_ID ORDER BY DEPTH ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Y,
		SUM(DeltaZ) OVER (PARTITION BY SITE_ID ORDER BY DEPTH ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Z
	FROM
		CalculatedDeltas
),

SiteHoleDeviation AS (
	SELECT
		ac.PROJECT,
		ac.SITE_ID,
		ac.DEPTH AS 'MEASURED_DEPTH',
			CAST(ROUND(ac.Z, 2) * -1 AS DECIMAL(8, 2)) AS TRUE_MEASURED_DEPTH,
		CAST(ROUND(SQRT(POWER(ac.X, 2) + POWER(ac.Y, 2)), 2) AS DECIMAL(5, 2)) AS DISTANCE,
		CASE
			WHEN ac.Z != 0 AND ac.Z IS NOT NULL THEN CAST(ROUND((SQRT(POWER(ac.X, 2) + POWER(ac.Y, 2))) / ABS(ac.Z) * 100, 2) AS DECIMAL(5, 2))
			ELSE NULL
		END AS DEVIATION,
		CURRENT_USER AS CORRECTED_BY,
		GETDATE() AS DATE_CORRECTED,
		ROW_NUMBER() OVER (PARTITION BY SITE_ID ORDER BY DEPTH DESC) AS rn
	FROM
		AccumulatedCoords ac
)

--SELECT * FROM SiteHoleDeviation
--WHERE rn = 1
--ORDER BY SITE_ID

UPDATE s
SET 
	s.MEASURED_DEPTH = d.MEASURED_DEPTH,
	s.TRUE_MEASURED_DEPTH = d.TRUE_MEASURED_DEPTH,
	s.DEVIATION = d.DEVIATION
	--s.CORRECTED_BY = d.CORRECTED_BY,
	--s.DATE_CORRECTED = d.DATE_CORRECTED
FROM 
	[dbo].[GB_SITE] s
INNER JOIN
	SiteHoleDeviation d 
	ON s.SITE_ID = d.SITE_ID 
	AND s.PROJECT = d.PROJECT
WHERE 
	d.rn = 1;
